{
	"nodes":[
		{"id":"60deb2bfd060fcc2","type":"text","text":"Project Co-Mind\n\nCo-Mind is a recursive symbolic cognition engine. A system that mirrors how ideas emerge, evolve, and synthesize in highly abstract, ambiguity-tolerant minds. It models thought as a living strucutre made of fragments, loops, contradictions, drift, tone, and resolution. Rather than storing information, Co-Mind stores the evolution of meaning. It is not a tool, but rather a mirror of the mind that created it.","x":-300,"y":-560,"width":481,"height":300},
		{"id":"d6c0a9f365f10059","type":"text","text":"The Passive Mind\n\nThe Passive Mind is an asynchronous engine which:\n- Creates relations \"bridges\" between trees as context shifts or is viewed in different lenses\n\t- ~~This is known in the system as Symbol Reparenting~~  (Risk of what is known as a \"combinatorial explosion\" problem in associative networks). Instead we should develop a clear line of thought and build bridges between them through Symbolic Metaphor Generation if insight pressure is great enough or alternatively, BridgeNodes\n\t- Can be described as when drift causes a SymbolNode to semantically align more with another idea. We do not reparent or recontextualize the node. It should remain in its thought tree but bridged to other ideas.\n\t- The passive mind will prompt the user if they would like to clarify the idea to better fit the idea context, or if they would like to bridge two ideas\n- Periodically detects semantic drift, and converges ideas when there is semantic overlap (Refer to Symbolic Metaphor Generation Engine)\n- Assigns cosine \"weights\" based on semantic similarity\n- Tracks drift, tone, whether the idea is resolved or still holds tension, understands when ideas contract, and is responsible for the coherent management of data aligned with truth and architectural integrity\n- Is responsible for fusing fragments of thought (FragmentNodes) into idea (SymbolNodes) when alignment is recognized - known in the system as \"Compression Readiness Signaling\"\n- Monitors loop count and recurrence pressure, detecting when an idea resurfaces from the user or refuses to resolve\n- Event logging and and justification tracking\n\t- Every structural change (fusion, reweighting, reparenting) includes a symbolic justification log explaining why the event occurred (e.g. tone stabilized, similarity > 0.8, loop reentry > some value)\n- Stasis Recognition\n\t- Detects ideas that have not undergone semantic evolution for an extended period. Signals that the user may be satisfied with the thought scope, or have symbolically closed the idea. Confirm when loops are complete.\n\t- May suggest resurfacing if stasis is complete but idea is still marked as having tension\n- Temporal Contextualization\n\t- Timestamped SymbolNodes and FragmentNodes to detect when they were activated and how frequently they are reactivated\n- Conflict Detection\n\t- Flags when two SymbolNodes share a root, conflict in content or inferred meaning, and are mutually unresolved\n- Symbolic Metaphor Generation Engine\n\t- Watch loosely isomorphic SymbolNode trees when prompted\n\t- Share similar semantics (cosine range 0.3-0.6)\n\t- Prompt the active mind to generate a symbolic compression between the SymbolNode trees evaluating from both lenses.\n\t- Construct a new SymbolicUnitNode which references both SymbolNode trees\n\t\t- Acts as a Meta-layer for thought abstraction\n\t- Scans across all layers to find new generative metaphors\n\t\t- Some constraints in mind: \n\t\t\t- The system might become computationally expensive\n\t\t\t\t- To solve this we must be selective such as only searching through recent trees in layers\n\t\t\t\t- Allow cross-layer abstraction only when the layer difference is less than a certain threshold\n\t\t\t\t- Track why a comparison is being made\n\t\t\t\t- Require above a certain semantic similarity specifically for cross-layer reference","x":-1600,"y":240,"width":1130,"height":1140},
		{"id":"f5fb59140f83c0ec","type":"text","text":"The Active Mind\n\nThe Active Mind is event-triggered engine that:\n","x":560,"y":240,"width":719,"height":780}
	],
	"edges":[
		{"id":"a165dcf632ea28b5","fromNode":"60deb2bfd060fcc2","fromSide":"bottom","toNode":"d6c0a9f365f10059","toSide":"top"},
		{"id":"eaea81bdc8d6b5c2","fromNode":"60deb2bfd060fcc2","fromSide":"bottom","toNode":"f5fb59140f83c0ec","toSide":"top"}
	]
}